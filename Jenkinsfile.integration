#!groovy


def compute_node='storage-rookcheck'
// the prefix we want to use for the rookcheck environment
def cluster_prefix="${currentBuild.fullProjectName.replace('/', '_')}-${currentBuild.number}_"

pipeline {
    agent {
        label "${compute_node}"
    }

    parameters {
        /* first value in the list is the default */
        choice(name: 'OS_CLOUD', choices: ['ecp'], description: 'OpenStack Cloud to use')
        string(name: 'OS_EXTERNAL_NETWORK', defaultValue: 'floating', description: 'the OpenStack external network')
        string(name: 'OS_FLAVOR', defaultValue: 'm1.medium', description: 'the OpenStack image flavor')

        choice(name: 'DISTRO', choices: ['all', 'openSUSE_k8s', 'SLES_CaaSP'], description: 'The OS/K8S distro tuple')
        choice(name: 'SES_TARGET', choices: ['ses7', 'devel7'], description: 'The set of repositories to use when building SLES_CaaSP (see ses.toml).')

        booleanParam(name: 'NOTIFY_ROCKETCHAT', defaultValue: false, description: "Whether or not to send notifications to SUSE's rocketchat")
        string(name: 'ROCKETCHAT_CHANNEL', defaultValue: 'ses-ci', description: 'the channel to post results in')
    }

    environment {
        // ROOKCHECK_CLUSTER_PREFIX = "${cluster_prefix}"
        // FIXME(jhesketh): ${cluster_prefix} is too long for a node name.
        //                  kubectl annotate fails when the network isn't set
        //                  up and the name is long. This is possibly an
        //                  upstream kubernetes bug that I need to investigate.
        ROOKCHECK_CLUSTER_PREFIX = "rookcheck-jen"
        OS_CLOUD = "${params.OS_CLOUD}"
        ROOKCHECK_OPENSTACK__EXTERNAL_NETWORK = "${params.OS_EXTERNAL_NETWORK}"
        ROOKCHECK_OPENSTACK__FLAVOR = "${params.OS_FLAVOR}"
        ROOKCHECK_UPSTREAM_ROOK__BUILD_ROOK_FROM_GIT = "FALSE"

    }
    stages {
        stage('Prep env') {
            steps {
                sh "mkdir artifacts"
            }
        }
        stage('Test distros') {
            failFast false
            parallel {
                stage('openSUSE_k8s') {
                    when {
                        anyOf {
                            expression { params.DISTRO == 'all' }
                            expression { params.DISTRO == 'openSUSE_k8s' }
                        }
                    }
                    environment {
                        ROOKCHECK_DISTRO = "openSUSE_k8s"
                        ROOKCHECK_NODE_IMAGE_USER = "opensuse"
                        ROOKCHECK_OPENSTACK__NODE_IMAGE = "openSUSE-Leap-15.2-JeOS-OpenStack-Cloud-Build31.149"
                        ROOKCHECK__GATHER_LOGS_DIR = "artifacts/openSUSE_k8s"
                    }
                    steps{
                        sh "env"
                        sh "tox -epy3 --workdir opensuse_venv -- -o junit_suite_name=openSUSE_k8s --junitxml junit-results/openSUSE_k8s.xml tests/test_basic.py"
                    }
                }
                stage('SLES_CaaSP') {
                    when {
                        anyOf {
                            expression { params.DISTRO == 'all' }
                            expression { params.DISTRO == 'SLES_CaaSP' }
                        }
                    }
                    environment {
                        ROOKCHECK_DISTRO = "SLES_CaaSP"
                        ROOKCHECK_SES__TARGET = "${params.SES_TARGET}"
                        ROOKCHECK_NODE_IMAGE_USER = "sles"
                        ROOKCHECK_OPENSTACK__NODE_IMAGE = "SLES15-SP2-JeOS.x86_64-15.2-OpenStack-Cloud-GM"
                        ROOKCHECK__GATHER_LOGS_DIR = "artifacts/SLES_CaaSP"
                    }
                    steps{
                        sh "env"
                        sh "tox -epy3 --workdir sles_venv -- -o junit_suite_name=SLES_CaaSP --junitxml junit-results/SLES_CaaSP.xml tests/test_basic.py"
                    }
                }
            }
        }
    }
    post {
        always {
            junit 'junit-results/*.xml'
            dir('artifacts') {
                archiveArtifacts artifacts: '**', allowEmptyArchive: true
            }
        }
        failure {
            script {
                if (params.NOTIFY_ROCKETCHAT) {
                    rocketSend channel: params.ROCKETCHAT_CHANNEL, message: "${env.JOB_BASE_NAME} failed"
                }
            }
        }
        fixed {
            script {
                if (params.NOTIFY_ROCKETCHAT) {
                    rocketSend channel: params.ROCKETCHAT_CHANNEL, message: "${env.JOB_BASE_NAME} returned to normal"
                }
            }
        }
    }
}
